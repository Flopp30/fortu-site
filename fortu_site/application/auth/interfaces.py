import dataclasses as dc
from types import EllipsisType
from typing import Protocol
from uuid import UUID

from fortu_site.application.auth.models import Session
from fortu_site.application.common.filters.base import BaseEllipsisFilter
from fortu_site.application.user.models import User


class IPasswordEncryptor(Protocol):
    def hash_password(self, raw_password: str) -> str: ...
    def verify_password(self, raw_password: str, hashed_password: str) -> bool: ...


class IAuthSessionService(Protocol):
    def check_session(self, session: Session): ...
    def create_session(self, user: User) -> Session: ...


@dc.dataclass
class SessionStorageFilter(BaseEllipsisFilter):
    session_id: UUID | None | EllipsisType = ...
    user_id: int | None | EllipsisType = ...


class ISessionRepository(Protocol):
    async def create(self, session: Session) -> Session: ...
    async def get_user(self, get_filter: SessionStorageFilter) -> User: ...
    async def get(self, get_filter: SessionStorageFilter) -> Session: ...
    async def revoke(self, session_id: UUID): ...
