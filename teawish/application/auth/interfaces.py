import dataclasses as dc
from types import EllipsisType
from typing import Protocol

from teawish.application.auth.models import Session, SESSION_ID
from teawish.application.common.filters.base import BaseEllipsisFilter
from teawish.application.user.models import User, USER_ID


class IPasswordEncryptor(Protocol):
    def hash_password(self, raw_password: str) -> str: ...
    def verify_password(self, raw_password: str, hashed_password: str) -> bool: ...


class IAuthSessionService(Protocol):
    def check_session(self, session: Session): ...
    def create_session(self, user: User) -> Session: ...


@dc.dataclass
class SessionStorageFilter(BaseEllipsisFilter):
    session_id: SESSION_ID | None | EllipsisType = ...
    user_id: USER_ID | None | EllipsisType = ...


class ISessionRepository(Protocol):
    async def create(self, session: Session) -> Session: ...
    async def get_user(self, get_filter: SessionStorageFilter) -> User: ...
    async def get(self, get_filter: SessionStorageFilter) -> Session: ...
    async def revoke(self, session_id: SESSION_ID): ...
    async def get_list(self, limit: int | None = None, offset: int | None = None) -> list[Session]: ...
    async def total_count(self) -> int: ...
