import dataclasses as dc
from types import EllipsisType
from typing import Protocol

from teawish.application.common.filters.base import BaseEllipsisFilter
from teawish.application.news.models import News


@dc.dataclass
class NewsGetFilter(BaseEllipsisFilter):
    id: int | None | EllipsisType = ...


class INewsRepository(Protocol):
    async def get_list(self, limit: int | None = None, offset: int | None = None) -> list[News]: ...
    async def total_count(self) -> int: ...
    async def get(self, get_filter: NewsGetFilter) -> News: ...
    async def create(self, news: News) -> News: ...
    async def update(self, news: News) -> News: ...
